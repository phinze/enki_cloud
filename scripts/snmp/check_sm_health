#!/bin/bash
#
# Michael Vallaly (July 08)
#
# Description:
#
# This plugin checks the system health of Supermicro Servers
# using the Super Doctor II Linux CLI.
#
# Usage: ./check_sm_health -C(acti) or -N(agios) 

#
# If we don't run as root add this line to /etc/sudoers :
# -------------------------------------------------------
# nagios      ALL=NOPASSWD: /etc/enki/tools/system/sdt_x86
# nagios      ALL=NOPASSWD: /etc/enki/tools/system/sdt_x86-64
#
#
# Examples:

STATE_UNKNOWN="3"
STATE_CRITICAL="2"
STATE_WARNING="1"
STATE_OK="0"
BC_BIN="/usr/bin/bc"
CLI_BASE="/etc/enki/tools/system/sdt"

NUM_OF_FANS="6"

#########################################################################################

# Determine our architecture
if [ "$(uname -m)" == "x86_64" ]; then
  CLI_BINARY="$CLI_BASE.x86_64"
else
  CLI_BINARY="$CLI_BASE.x86"
fi

# Check that our CLI utility exits
if [ ! -x $CLI_BINARY ]; then
	echo "Supermicro CLI Utility not found!"
	exit $STATE_UNKNOWN
fi

# Print our usage line
usage="Usage: ./check_sm_health -C(acti) or -N(agios) -b -f -i -m -p -t\n\n
\t-N  Nagios Check Output\n
\t-C  Cacti Graph Output\n\n
\t-b  CMOS Battery Status\n
\t-f  Fan Status\n
\t-i  Chassis Intrusion\n
\t-m  Motherboard Voltages\n
\t-p  Power Supplies\n
\t-t  Tempatures\n" 

# Check our parameters and set the service_type/check_filters 
while getopts "CNfbmtpi" options; do
  case $options in
    C ) service_type="cacti";;
    N ) service_type="nagios";;
    b ) check_type="range"
	check_filter="|grep -e 'Battery' |awk '{print \$1\" \"\$2\":\"\$5\":\"\$3\":\"\$4}'";;
    f ) check_type="range"
	check_filter="|grep -e 'Fan' |grep 'Fan' |head -$NUM_OF_FANS |awk '{print \$1\" \"\$3\":\"\$5\"::\"\$4}'";;
    i ) check_type="string"
	check_filter="|grep 'Chassis Intrusion' |awk '{print \$1\" \"\$2\":\"\$3}'";;
    m ) check_type="range"
	check_filter="|grep -e 'V[[:alpha:]]\{0,2\} Voltage' |awk '{print \$1\" \"\$2 \":\"\$5\":\"\$3\":\"\$4}'";;
    t ) check_type="range"
	check_filter="|grep -e 'Temperature' |tr -t '/' ' ' |awk '{print \$1\" \"\$2\":\"\$6\":\"\$4}'";;
    p ) check_type="string"
	check_filter="|grep 'Power Supply Failure' |awk '{print \"Redundant Powersupply:\"\$4}'";;
    \? ) echo -e $usage
         exit $STATE_UNKNOWN;;
     * ) echo -e $usage
         exit $STATE_UNKNOWN;;
  esac
done

# Check our passed parameters
if [ "$service_type" == "" -o "$check_type" == "" ]; then
  echo -e $usage
  exit $STATE_UNKNOWN
fi 

### Globals

CRIT_COUNT=0
WARN_COUNT=0
UNK_COUNT=0

# Generate our systemwide status (reverse sort)
CLI_OUTPUT=`eval "sudo $CLI_BINARY $check_filter" |sort -r`

# If we want nagios output
if [ "$service_type" == "nagios" ]; then

   # Validate decimal number ranges
   if [ "$check_type" == "range" ]; then

     # Delimit on newline only
     IFS=$'\n'
    
     for device in $CLI_OUTPUT; do

        # Split our output for comparison
        device_label=`echo $device |cut -s -d: -f1`
        device_status=`echo $device |cut -s -d: -f2`
        device_max=`echo $device |cut -s -d: -f3`
        device_min=`echo $device |cut -s -d: -f4`

        # We only have a lower range to compare against
        if [ "$device_max" == "" ]; then
	   
           if [ "`echo "$device_status > $device_min" |$BC_BIN`" -eq 1 ]; then
	      output_status=`echo "$device_label ($device_min/$device_status) - OK " $output_status`
              continue	      
	   else
              output_status=`echo "$device_label ($device_min/$device_status) - FAILED " $output_status` 
              CRIT_COUNT=1
	   fi 
         
         # We only have an upper range to compare against
	 elif [ "$device_min" == "" ]; then
	
              if [ "`echo "$device_status < $device_max" |$BC_BIN`" -eq 1 ]; then
                output_status=`echo "$device_label ($device_status/$device_max) - OK " $output_status`
                continue
              else
                output_status=`echo "$device_label ($device_status/$device_max) - FAILED " $output_status`             
                CRIT_COUNT=1
              fi
	 # Compare against both upper and lower bounds
         else 
            
	   if [ "`echo \"$device_status > $device_min && $device_status < $device_max\" |$BC_BIN`" -eq 1 ]; then
	     output_status=`echo "$device_label ($device_max/$device_status/$device_min) - OK " $output_status`  
             continue	
	   else	
	     output_status=`echo "$device_label ($device_max/$device_status/$device_min) - FAILED " $output_status`  
	     CRIT_COUNT=1
	     continue
           fi

	 fi

    done

  # Validate strings
  else

     # Delimit on newline only
     IFS=$'\n'

     for device in $CLI_OUTPUT; do

       # Split our output for comparison
       device_label=`echo $device |cut -s -d: -f1`
       device_status=`echo $device |cut -s -d: -f2`

       # Check if the output is OK
       if [ "$device_status" == "Good" ]; then
          output_status=`echo "$device_label - OK " $output_status`
          continue   
       else 
          output_status=`echo "$device_label - FAILED " $output_status` 
          CRIT_COUNT=1
          continue
       fi
     
     done
  fi

# Print output for Cacti
else
 
  echo "$CLI_OUTPUT" 
  exit 0

fi

# Generate the proper exit status for nagios
if [ "$CRIT_COUNT" -ne 0 ]; then
   EXIT_STATUS=$STATE_CRITICAL
elif [ "$WARN_COUNT" -ne 0 ]; then
   EXIT_STATUS=$STATE_WARNING
elif [ "$UNK_COUNT" -ne 0 ]; then
   EXIT_STATUS=$STATE_UNKOWN
else
   EXIT_STATUS=$STATE_OK
fi

# Print out status and exit
echo -n "$output_status"
exit $EXIT_STATUS


