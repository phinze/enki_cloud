#!/bin/bash

# Michael Vallaly (Feb 2009) Ver 1.0

# This script checks 
#  A. That the locally configured ntp server is reachable
#  B. That the local machine has the correct time (within limits)

BC_BIN="/usr/bin/bc"
NTPDATE_BIN="/usr/sbin/ntpdate"
NTP_CONFIGS="/etc/ntp.conf /etc/openntpd/ntpd.conf"
NTP_OPTS="-q -t 0.6 -u"
MAX_CLOCK_SKEW="3.0" # in seconds

###########################################################
STATE_UNKNOWN="3"
STATE_CRITICAL="2"
STATE_WARNING="1"
STATE_OK="0"

CRIT_COUNT=0
WARN_COUNT=0
UNK_COUNT=0


# Check for required binaries
for req_bin in $BC_BIN $NTPDATE_BIN; do
  if [ ! -x "$req_bin" ]; then
    echo "Can't execute ${req_bin}! Aborting.."
    exit 1
  fi
done

# Grab our NTP configuration
for f in $NTP_CONFIGS; do
  if [ -r "$f" ]; then
    file=$f
    break
  fi
done

# Open our config file and grab the NTP servers
if [ ! -n "$file" ]; then
  
  # We couldn't find a valid configuration file
  script_output="No NTP configuration found!"
  cmd_status=1
  CRIT_COUNT=1

else

  # Grab the NTP servers
  SERVERS=$(sed -rne 's/^(servers?|peer) ([-_.:[:alnum:]]+).*$/\2/p' "$file" | grep -v '^127\.127\.') || [ $? -le 1 ]

  # Attempt an update from said servers
  cmd_output=`eval ${NTPDATE_BIN} $NTP_OPTS $SERVERS 2>&1`
  cmd_status=$?
 
  # Check the command status
  if [ $cmd_status -ne 0 ]; then

    script_output="Cannot connect to NTP server ($(echo $cmd_output |grep -v 'ntpdate' |awk '{print $2}'|tr -d ',')) for synchronization!"
    CRIT_COUNT=1

  else

    local_skew=`echo "$cmd_output" |grep -v 'ntpdate' |awk '{print $6}' |tr -d ',' |head -1`
    
    if [ $(echo "$local_skew > $MAX_CLOCK_SKEW" | $BC_BIN 2> /dev/null) -eq 0 ] ; then
      script_output="Local clock is synchronized via NTP."
    else
      script_output="Clock skew detected! Local clock is $local_skew sec from NTP server."
      CRIT_COUNT=1
    fi

  fi

fi

# Print out output and exit
if [ "$CRIT_COUNT" -ne 0 ]; then
  output_status="CRITICAL"
  EXIT_STATUS=$STATE_CRITICAL
elif [ "$WARN_COUNT" -ne 0 ]; then
  output_status="WARNING"
  EXIT_STATUS=$STATE_WARNING
elif [ "$UNK_COUNT" -ne 0 ]; then
  output_status="UNKNOWN"
  EXIT_STATUS=$STATE_UNKOWN
else
  output_status="OK"
  EXIT_STATUS=$STATE_OK
fi

# Output our status and exit
echo "$output_status - $script_output"
exit $EXIT_STATUS


