#!/usr/bin/ruby 

require 'pathname'

# when in a bin or script dir
$:.unshift(Pathname.new($0).realpath.dirname.join('../lib').realpath)
$:.unshift(Pathname.new($0).realpath.dirname.join('..').realpath)
$:.unshift(Pathname.new($0).realpath.dirname.realpath)
$verbose = false
ENV['RAILS_ENV'] = 'production' if ENV['RAILS_ENV'].nil? 
require 'config/environment'

def usage()
  puts "cron-task taskname [args]"
  puts "tasks: Pushscs, Pushpdu, Pushclient(*host)"
end

def run(args)
  task = args.shift
  otherargs = args
  taskCls = Class.const_get(task)

  if otherargs.length == 0 then
   res = Resque.enqueue(taskCls)
  else
   res  = Resque.enqueue(taskCls, *otherargs)
  end
  unless res == 'OK' then
    raise 'Failed to queue'
  end
  return 0
end

def main
  begin
    if ARGV.length < 1  then
      usage()
      return 9
    end
    trap("INT") { exit(-2) }
    run(ARGV)
  rescue Object => e
    puts "Error: #{e}"
    puts e.backtrace 
    return -1
  end
end
exit main()
__END__

class PushController < ApplicationController
  filter_access_to :all

  def index
    redirect_to :list
  end
  def list
  end

  def scs
    res = Resque.enqueue(Pushscs)
    render :layout => false, :text => "<strong>SCS has been queued for push!</strong>"
  end

  def pdu
    res = Resque.enqueue(Pushpdu)
    render :layout => false, :text => "<strong>PDU has been queued for push!</strong>"
  end
  
  def host
  end

  def host_push
    which_host = params[:hosts]
    host = params[:host]
    if which_host == "all"
      res = Resque.enqueue(Pushclient)
    elsif which_host == "one" and host != ""
      res = Resque.enqueue(Pushclient, host)
    end
  end
end
